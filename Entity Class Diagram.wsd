@startuml EntityClassDiagram
abstract Item {
    -id:int
    -deleted:bool
    +toString():String
    +delete():void
}

'Project Items
class Project extends Item {
    -name:String
    -neighborhood:String
    -flatType:enum (2-Room, 3-Room)
    -units:String
    -openingDate
    -closingDate
    -officerSlots:int
    -visibility:bool
    +getApplicantions():Application[]
    +getOfficerApplications():OfficerApplication[]
    +getEnquiries():Enquiry[]
    +getOfficers():Officer[]
    +getManager():Manager
}

class Application extends Item {
    -applicant:Applicant
    -project:Project
    -status:enum (pending, successful, unsuccessful, booked, withdrawing, withdrawn)
}

Application --> Applicant : Applicant
Application --> Project : Project

class OfficerApplication extends Application
OfficerApplication --> Officer : Officer
OfficerApplication --> Project : Project

class Enquiry extends Item {
    -applicant:Applicant
    -replier:User
    -project:Project
    -enquiry:String
    -reply:String
}
Enquiry --> Project : Project

'Users
class User extends Item{
    -name:String
    -type:enum
    -password:String
    -age:int
    -maritalStatus:enum
}

class Applicant extends User {
    -project:Project
    +applyProject(p:Project)
    +withdrawApplication()
    +getApplication():Application
    +getEnquiries():Enquiry[]
}

class Officer extends Applicant {
    -projectInCharge:Project
    +getProject():Project
    +getOfficerApplication():OfficerApplication
    +getReplies():Enquiry[]
}

class Manager extends User {
    -projectInCharge:Project
    +getProject():Project
    +createProject():Project
    +getReplies():Enquiry[]
}

'GUI Interfaces 
interface Menu {
    +displayMenu()
}
class ApplicantMenu extends Menu
class ManagerMenu extends Menu
class OfficerMenu extends Menu
class LoginMenu extends Menu {
    +displayMenu()
    'after login, we call one of the 3 menus based on the  enum 
}
LoginMenu ..> AppUserManager
LoginMenu ..> ApplicantMenu
LoginMenu ..> OfficerMenu
LoginMenu ..> ManagerMenu

'Arrays
class Users <<static>> {
    -userArray:User[]
    +filterApplicants(p:Project):Applicant[]
    +filterOfficers(p:Project):Officer[]
    +filterManager(p:Project):Manager
}
Users "1" -- "*" User

class Projects <<static>> {
    -projectArray:Project[]
    +filter()
}
Projects "1" -- "*" Project

class Applications <<static>>{
    -ApplicationArray:Application[]
    +filter(p:Project):Application[]
    +filter(a:Applicant):Application
}
Applications "1" -- "*" Application

class OfficerApplications <<static>> extends Applications 
OfficerApplications "1" -- "*" OfficerApplication

class Enquiries <<static>> {
    -EnquiryArray: Enquiry[]
    +filter(p:Project):Enquiry[]
    'filtering as an applicant gets enquiries
    +filter(a:Applicant):Enquiry[] 
    'filtering as a manager or officer gets replies
    +filter(m:Manager):Enquiry[]
    +filter(o:Officer):Enquiry[]
}
Enquiries "1" -- "*" Enquiry

'Managers
class ApplicationManager <<static>> {
    +WithdrawApplication(a:Application)
    +ApproveApplication(a:Application)
    +BookApplication(a:Application)
    +ApproveWithdrawal(a:Application)
}
ApplicationManager ..> Application

class ProjectManager <<static>> {
    +newProject():Project
    +toggleVisibility(p:Project,vis:bool)
    +viewDetails(p:Project)
}
ProjectManager ..> Project

class EnquiryManager <<static>> {
    +reply(r:string) only used by managers
}
EnquiryManager ..> Enquiry

class AppUserManager <<static>> {
    -currentUser:User
    +login()
    +logout()
}
AppUserManager ..> User


' not sure about this one
class OfficerMenu extends ApplicantMenu 


@enduml